{"version":3,"sources":["managers/endpoint.manager.ts"],"names":[],"mappings":"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","file":"src/managers/endpoint.manager.js","sourcesContent":["import {Injectable} from '@angular/core'\nimport {Storage, StorageType, IEndpoint} from '../helpers';\n\n@Injectable()\nexport class EndpointManager extends Storage<IEndpoint> {\n    constructor() {\n        super('OAuth2Endpoints', StorageType.LocalStorage);\n    }\n\n    private _currentHost: string;\n    get currentHost(): string {\n        if (this._currentHost == null) {\n            this._currentHost = window.location.protocol + \"//\" + window.location.host;\n        }\n\n        return this._currentHost;\n    }\n\n    registerGoogleAuth(clientId: string, redirect_uri?: string, scope?: string) {\n        var config = <IEndpoint>{\n            provider: 'Google',\n            clientId: clientId,\n            redirectUrl: redirect_uri || this.currentHost,\n            profileUrl: 'https://www.googleapis.com/plus/v1/people/me',\n            site: 'https://accounts.google.com',\n            authorizeUrl: '/o/oauth2/v2/auth',\n            resource: 'https://www.googleapis.com',\n            responseType: 'token',\n            scope: scope || 'https://www.googleapis.com/auth/plus.me'\n        };\n\n        this.add(config.provider, config);\n    };\n\n    registerMicrosoftAuth(clientId: string, redirect_uri?: string, scope?: string) {\n        var config = <IEndpoint>{\n            provider: 'Microsoft',\n            clientId: clientId,\n            redirectUrl: redirect_uri || this.currentHost,\n            profileUrl: 'https://graph.microsoft.com/v1.0/me',\n            site: 'https://login.microsoftonline.com/common/oauth2/v2.0',\n            authorizeUrl: '/authorize',\n            resource: 'https://login.live.com',\n            responseType: 'token',\n            scope: scope || 'https://graph.microsoft.com/user.read',\n            extraParameters: '&response_mode=fragment'\n        };\n\n        this.add(config.provider, config);\n    };\n\n    registerFacebookAuth(clientId: string, redirect_uri?: string, scope?: string) {\n        var config = <IEndpoint>{\n            provider: 'Facebook',\n            clientId: clientId,\n            redirectUrl: redirect_uri || this.currentHost,\n            profileUrl: 'https://graph.facebook.com/v2.5/me',\n            site: 'https://www.facebook.com',\n            authorizeUrl: '/dialog/oauth',\n            resource: 'https://graph.facebook.com',\n            responseType: 'token',\n            scope: scope || 'public_profile'\n        };\n\n        this.add(config.provider, config);\n    };\n\n    static getLoginUrl(endpointConfig: IEndpoint): string {\n        var oAuthScope = (endpointConfig.scope) ? encodeURIComponent(endpointConfig.scope) : '',\n            state = (endpointConfig.state) ? encodeURIComponent(endpointConfig.state) : '',\n            authPathHasQuery = (endpointConfig.authorizeUrl.indexOf('?') === -1) ? false : true,\n            appendChar = (authPathHasQuery) ? '&' : '?',\n            responseType = (endpointConfig.responseType) ? encodeURIComponent(endpointConfig.responseType) : '';\n\n        var url = endpointConfig.site + endpointConfig.authorizeUrl + appendChar +\n            'response_type=' + responseType + '&' +\n            'client_id=' + encodeURIComponent(endpointConfig.clientId) + '&' +\n            'redirect_uri=' + encodeURIComponent(endpointConfig.redirectUrl) + '&' +\n            'scope=' + oAuthScope + '&' +\n            'state=' + state;\n\n        var random = new Uint16Array(1);\n        crypto.getRandomValues(random);\n        url = url + '&nounce=' + random[0];\n\n        return url;\n    }\n}"],"sourceRoot":"/source/"}