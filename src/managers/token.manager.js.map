{"version":3,"sources":["managers/token.manager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAAiC,eACjC,CAAC,CAD+C;AAEhD,wBAAsD,YAAY,CAAC,CAAA;AAGnE;IAAkC,gCAAe;IAC7C;QACI,kBAAM,cAAc,EAAE,qBAAW,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC;IAED,iCAAU,GAAV,UAAW,QAAgB;QACvB,8FAA8F;IAClG,CAAC;IAED,+BAAQ,GAAR,UAAS,OAAe,EAAE,QAAmB,EAAE,SAAuB;QAAvB,yBAAuB,GAAvB,eAAuB;QAClE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAEpD,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC;QAE9B,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxD,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC;gBAAC,MAAM,CAAC;YAChD,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAS,MAAM,CAAC,CAAC;IAC3C,CAAC;IAEO,qCAAc,GAAtB,UAAuB,OAAe;QAClC,IAAI,MAAM,GAAQ,EAAE,EAChB,KAAK,GAAG,mBAAmB,EAC3B,OAAO,CAAC;QAEZ,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC9C,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAzCL;QAAC,iBAAU,EAAE;;oBAAA;IA0Cb,mBAAC;AAAD,CAzCA,AAyCC,CAzCiC,iBAAO,GAyCxC;AAzCY,oBAAY,eAyCxB,CAAA","file":"src/managers/token.manager.js","sourcesContent":["import {Inject, Injectable} from '@angular/core'\nimport {Observable} from 'rxjs/Rx';\nimport {IEndpoint, IToken, Storage, StorageType} from '../helpers';\n\n@Injectable()\nexport class TokenManager extends Storage<IToken> {\n    constructor() {\n        super('OAuth2Tokens', StorageType.LocalStorage);\n    }\n\n    setExpired(provider: string) {\n        // return (this._tokens.endpo && this.token.expires_at && this.token.expires_at < new Date());\n    }\n\n    getToken(segment: string, endpoint: IEndpoint, delimiter: string = '#'): Promise<IToken> {\n        segment = segment.replace(endpoint.redirectUrl, '');\n\n        let parts = segment.split(delimiter);\n        if (parts.length <= 0) return;\n\n        let rightPart = parts.length >= 2 ? parts[1] : parts[0];\n        rightPart = rightPart.replace('/', '');\n\n        if (rightPart.indexOf(\"?\") !== -1) {\n            let queryPart = rightPart.split(\"?\");\n            if (!queryPart || queryPart.length <= 0) return;\n            rightPart = queryPart[1];\n        }\n\n        let params = this._extractParams(rightPart);\n        params.provider = endpoint.provider;\n        this.add(endpoint.provider, params);\n        return Promise.resolve<IToken>(params);\n    }\n\n    private _extractParams(segment: string) {\n        let params: any = {},\n            regex = /([^&=]+)=([^&]*)/g,\n            matches;\n\n        while ((matches = regex.exec(segment)) !== null) {\n            params[decodeURIComponent(matches[1])] = decodeURIComponent(matches[2]);\n        }\n\n        return params;\n    }\n}"],"sourceRoot":"/source/"}