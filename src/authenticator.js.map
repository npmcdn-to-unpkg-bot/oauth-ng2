{"version":3,"sources":["authenticator.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,yBAA4D,YAAY,CAAC,CAAA;AAIzE;IACI,uBACY,gBAAiC,EACjC,aAA2B,EAC3B,eAA+B;QAF/B,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,kBAAa,GAAb,aAAa,CAAc;QAC3B,oBAAe,GAAf,eAAe,CAAgB;IAE3C,CAAC;IAED,oCAAY,GAAZ,UAAa,QAAgB;QACzB,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEO,oCAAY,GAApB,UAAqB,QAAmB;QAAxC,iBA8BC;QA7BG,IAAI,GAAG,GAAG,0BAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,IAAI,sBAAsB,CAAC;QAC/D,IAAI,cAAc,GAAG,UAAU,GAAG,0EAA0E,CAAC;QAC7G,IAAI,WAAW,GAAW,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,cAAc,CAAC,CAAC;QAE5F,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;YACvC,IAAI,CAAC;gBACD,IAAI,UAAQ,GAAG,WAAW,CAAC;oBACvB,IAAI,CAAC;wBACD,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChE,aAAa,CAAC,UAAQ,CAAC,CAAC;4BACxB,IAAI,KAAK,GAAG,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;4BAC3E,WAAW,CAAC,KAAK,EAAE,CAAC;4BACpB,OAAO,CAAC,KAAK,CAAC,CAAC;wBACnB,CAAC;oBACL,CACA;oBAAA,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACf,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;4BACf,aAAa,CAAC,UAAQ,CAAC,CAAC;4BACxB,MAAM,CAAC,SAAS,CAAC,CAAC;wBACtB,CAAC;oBACL,CAAC;gBACL,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,CACA;YAAA,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACf,WAAW,CAAC,KAAK,EAAE,CAAC;gBACpB,MAAM,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA5CL;QAAC,iBAAU,EAAE;;qBAAA;IA6Cb,oBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CD;+BA4CC,CAAA","file":"src/authenticator.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {EndpointManager, TokenManager, ProfileManager} from './managers';\nimport {IToken, IEndpoint} from './helpers';\n\n@Injectable()\nexport default class Authenticator {\n    constructor(\n        private _endpointManager: EndpointManager,\n        private _tokenManager: TokenManager,\n        private _profileManager: ProfileManager\n    ) {\n    }\n\n    authenticate(provider: string): Promise<IToken> {\n        let endpoint = this._endpointManager.get(provider);\n        return this._openInPopup(endpoint);\n    }\n\n    private _openInPopup(endpoint: IEndpoint) {\n        let url = EndpointManager.getLoginUrl(endpoint);\n        let windowSize = endpoint.windowSize || \"width=400,height=600\";\n        let windowFeatures = windowSize + \",menubar=no,toolbar=no,location=no,resizable=no,scrollbars=yes,status=no\";\n        let popupWindow: Window = window.open(url, endpoint.provider.toUpperCase(), windowFeatures);\n\n        return new Promise<IToken>((resolve, reject) => {\n            try {\n                let interval = setInterval(() => {\n                    try {\n                        if (popupWindow.document.URL.indexOf(endpoint.redirectUrl) !== -1) {\n                            clearInterval(interval);\n                            let token = this._tokenManager.getToken(popupWindow.document.URL, endpoint)\n                            popupWindow.close();\n                            resolve(token);\n                        }\n                    }\n                    catch (exception) {\n                        if (!popupWindow) {\n                            clearInterval(interval);\n                            reject(exception);\n                        }\n                    }\n                }, 400);\n            }\n            catch (exception) {\n                popupWindow.close();\n                reject(exception);\n            }\n        });\n    }\n}"],"sourceRoot":"/source/"}